{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","currentPage","perPage","handlePageChange","countPages","Math","ceil","items","map","arrayOfPage","currentItemsOnPage","slice","className","classNames","disabled","href","onClick","page","active","PageChange","item","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","firstItemOnPage","lastItemOnPage","min","id","onChange","event","target","value","selected","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"2MAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,iBAcMC,EAAaC,KAAKC,KAAKN,EAAQE,GAC/BK,EAAQd,EAAW,EAAGO,GAAOQ,KAAI,SAAAX,GAAC,qBAAYA,MAC9CY,EAAwBhB,EAAW,EAAGW,GACtCM,EAAqBH,EAAMI,OAC9BV,EAAc,GAAKC,EAAUD,EAAcC,GAS9C,OACE,qCACE,qBAAIU,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YACxB,CAAEC,SAA0B,IAAhBb,IADd,SAGE,mBACE,UAAQ,WACRW,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBd,EACfe,QA9BY,WACA,IAAhBf,GACFE,EAAiBF,EAAc,IAuB3B,oBAUDQ,EAAYD,KAAI,SAAAS,GAAI,OACnB,oBAEEL,UAAWC,IACT,YAAa,CAAEK,OAAQD,IAAShB,IAHpC,SAME,mBACE,UAAQ,WACRW,UAAWC,IAAW,aACtBE,KAAI,WAAME,GACVD,QAAS,kBApDF,SAACC,GACdA,IAAShB,GACXE,EAAiBc,GAkDME,CAAWF,IAJ5B,SAMGA,KAXEA,MAgBT,oBACEL,UAAWC,IACT,YAAa,CAAEC,SAAUb,IAAgBG,IAF7C,SAKE,mBACE,UAAQ,WACRQ,UAAWC,IAAW,aACtBE,KAAK,QACL,gBAAed,IAAgBG,EAC/BY,QAlDY,WAChBf,IAAgBG,GAClBD,EAAiBF,EAAc,IA2C3B,uBAWJ,6BACGS,EAAmBF,KAAI,SAAAY,GAAI,OAC1B,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCxFJC,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOrB,EAAP,KAAoBsB,EAApB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAEMC,GAAoBzB,EAAc,GAAKuB,EAAgB,EACvDG,EAAiBtB,KAAKuB,IAPX,GAQHF,EAAkBF,EAAe,GAM/C,OACE,sBAAKZ,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWX,EADX,mBACiCyB,EADjC,cACsDC,EADtD,eAlBa,GAkBb,OAIA,sBAAKf,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,SAAU,SAACC,GACTN,GAAiBM,EAAMC,OAAOC,OAC9BV,EAAe,IANnB,UASE,wBAAQU,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAIC,UAAQ,EAA1B,eACA,wBAAQD,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOE,QAAQ,kBAAkBvB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACEZ,MA7CW,GA8CXC,YAAaA,EACbC,QAASsB,EACTrB,iBAtCkB,SAACc,GACvBM,EAAeN,UCZnBmB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b08fd9a4.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  currentPage: number,\n  perPage: number\n  handlePageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  currentPage,\n  perPage,\n  handlePageChange,\n}) => {\n  const PageChange = (page: number) => {\n    if (page !== currentPage) {\n      handlePageChange(page);\n    }\n  };\n\n  const prevLinkClick = () => {\n    if (currentPage !== 1) {\n      handlePageChange(currentPage - 1);\n    }\n  };\n\n  const countPages = Math.ceil(total / perPage);\n  const items = getNumbers(1, total).map(n => `Item ${n}`);\n  const arrayOfPage: number[] = getNumbers(1, countPages);\n  const currentItemsOnPage = items.slice(\n    (currentPage - 1) * perPage, (currentPage * perPage),\n  );\n\n  const nextLinkClick = () => {\n    if (currentPage !== countPages) {\n      handlePageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item',\n          { disabled: currentPage === 1 })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={prevLinkClick}\n          >\n            «\n          </a>\n        </li>\n        {arrayOfPage.map(page => (\n          <li\n            key={page}\n            className={classNames(\n              'page-item', { active: page === currentPage },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className={classNames('page-link')}\n              href={`#${page}`}\n              onClick={() => PageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li\n          className={classNames(\n            'page-item', { disabled: currentPage === countPages },\n          )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className={classNames('page-link')}\n            href=\"#next\"\n            aria-disabled={currentPage === countPages}\n            onClick={nextLinkClick}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {currentItemsOnPage.map(item => (\n          <li\n            key={item}\n            data-cy=\"item\"\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\n\nconst totalItems = 42;\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n\n  const firstItemOnPage = ((currentPage - 1) * itemsPerPage) + 1;\n  const lastItemOnPage = Math.min(\n    totalItems, firstItemOnPage + itemsPerPage - 1,\n  );\n  const hadlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemOnPage} - ${lastItemOnPage} of ${totalItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(event) => {\n              setItemsPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\" selected>5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={totalItems}\n        currentPage={currentPage}\n        perPage={itemsPerPage}\n        handlePageChange={hadlePageChange}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}